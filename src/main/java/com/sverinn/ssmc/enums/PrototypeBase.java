package com.sverinn.ssmc.enums;

import net.minecraft.util.StringIdentifiable;

public enum PrototypeBase implements StringIdentifiable {
    ACCENT("accent"),
    ACCESSGROUP("accessGroup"),
    ACCESSLEVEL("accessLevel"),
    AIRLOCKDEPARTMENTS("airlockDepartments"),
    AIRLOCKGROUP("AirlockGroup"),
    ALARMTHRESHOLD("alarmThreshold"),
    ALERT("alert"),
    ALERTCATEGORY("alertCategory"),
    ALERTLEVELS("alertLevels"),
    ALERTORDER("alertOrder"),
    AMBIENTMUSIC("ambientMusic"),
    ANOMALYBEHAVIOR("anomalyBehavior"),
    ANTAG("antag"),
    AUTOEMOTE("autoEmote"),
    BARSIGN("barSign"),
    BIOMEMARKERLAYER("biomeMarkerLayer"),
    BIOMETEMPLATE("biomeTemplate"),
    BODY("body"),
    BORGTYPE("borgType"),
    CARGOACCOUNT("cargoAccount"),
    CARGOBOUNTY("cargoBounty"),
    CARGOBOUNTYGROUP("cargoBountyGroup"),
    CARGOMARKET("cargoMarket"),
    CARGOPRODUCT("cargoProduct"),
    CLONINGSETTINGS("cloningSettings"),
    CONSTRUCTION("construction"),
    CONSTRUCTIONGRAPH("constructionGraph"),
    CONTRABANDSEVERITY("contrabandSeverity"),
    CURRENCY("currency"),
    DAMAGECONTAINER("damageContainer"),
    DAMAGEGROUP("damageGroup"),
    DAMAGEMODIFIERSET("damageModifierSet"),
    DAMAGETYPE("damageType"),
    DATASET("dataset"),
    DEBUGICON("debugIcon"),
    DECAL("decal"),
    DEPARTMENT("department"),
    DEVICEFREQUENCY("deviceFrequency"),
    DISCOUNTCATEGORY("discountCategory"),
    DUNGEONCONFIG("dungeonConfig"),
    DUNGEONPRESET("dungeonPreset"),
    DUNGEONROOM("dungeonRoom"),
    DUNGEONROOMPACK("dungeonRoomPack"),
    EDGESPREADER("edgeSpreader"),
    EMOTE("emote"),
    EMOTESOUNDS("emoteSounds"),
    ENTITY("entity"),
    ENTITYCATEGORY("entityCategory"),
    ENTITYLIST("entityList"),
    ENTITYLOOTTABLE("entityLootTable"),
    ENTITYTABLE("entityTable"),
    EXAMINABLEDAMAGE("examinableDamage"),
    EXPLOSION("explosion"),
    FACTIONICON("factionIcon"),
    FLAVOR("flavor"),
    FONT("font"),
    FOODSEQUENCEELEMENT("foodSequenceElement"),
    GAMEMAP("gameMap"),
    GAMEMAPPOOL("gameMapPool"),
    GAMEPRESET("gamePreset"),
    GAS("gas"),
    GASREACTION("gasReaction"),
    GHOSTROLE("ghostRole"),
    GHOSTROLERAFFLEDECIDER("ghostRoleRaffleDecider"),
    GHOSTROLERAFFLESETTINGS("ghostRoleRaffleSettings"),
    GUIDEENTRY("guideEntry"),
    HEALTHICON("healthIcon"),
    HITSCAN("hitscan"),
    HOLIDAY("holiday"),
    HTNCOMPOUND("htnCompound"),
    HUDTHEME("hudTheme"),
    HUMANOIDBASESPRITE("humanoidBaseSprite"),
    INVENTORYTEMPLATE("inventoryTemplate"),
    ITEMSIZE("itemSize"),
    JOB("job"),
    JOBICON("jobIcon"),
    JOBREQUIREMENTOVERRIDE("jobRequirementOverride"),
    JUKEBOX("jukebox"),
    LATHECATEGORY("latheCategory"),
    LATHERECIPE("latheRecipe"),
    LATHERECIPEPACK("latheRecipePack"),
    LISTING("listing"),
    LOADOUT("loadout"),
    LOADOUTEFFECTGROUP("loadoutEffectGroup"),
    LOADOUTGROUP("loadoutGroup"),
    LOBBYBACKGROUND("lobbyBackground"),
    LOCALIZEDDATASET("localizedDataset"),
    MARKING("marking"),
    MARKINGPOINTS("markingPoints"),
    MATERIAL("material"),
    METABOLISMGROUP("metabolismGroup"),
    METABOLIZERTYPE("metabolizerType"),
    METAMORPHRECIPE("metamorphRecipe"),
    MICROWAVEMEALRECIPE("microwaveMealRecipe"),
    MIXINGCATEGORY("mixingCategory"),
    NAMEIDENTIFIERGROUP("nameIdentifierGroup"),
    NAVMAPBLIP("navMapBlip"),
    NINJAHACKINGTHREAT("ninjaHackingThreat"),
    NOISECHANNEL("noiseChannel"),
    NPCFACTION("npcFaction"),
    ORE("ore"),
    OREDUNGEN("oreDunGen"),
    PALETTE("palette"),
    PARALLAX("parallax"),
    PLAYERCONNECTIONWHITELIST("playerConnectionWhitelist"),
    PLAYTIMETRACKER("playTimeTracker"),
    POLYMORPH("polymorph"),
    PRELOADEDGRID("preloadedGrid"),
    RADIOCHANNEL("radioChannel"),
    RANDOMHUMANOIDSETTINGS("randomHumanoidSettings"),
    RANDOMPLANTMUTATIONLIST("RandomPlantMutationList"),
    RCD("rcd"),
    REACTION("reaction"),
    REACTIVEGROUP("reactiveGroup"),
    REAGENT("reagent"),
    ROLELOADOUT("roleLoadout"),
    ROLETYPE("roleType"),
    ROUNDANNOUNCEMENT("roundAnnouncement"),
    RULES("rules"),
    SALVAGEAIRMOD("salvageAirMod"),
    SALVAGEBIOMEMOD("salvageBiomeMod"),
    SALVAGEDIFFICULTY("salvageDifficulty"),
    SALVAGEDUNGEONMOD("salvageDungeonMod"),
    SALVAGEFACTION("salvageFaction"),
    SALVAGELIGHTMOD("salvageLightMod"),
    SALVAGELOOT("salvageLoot"),
    SALVAGEMAP("salvageMap"),
    SALVAGETEMPERATUREMOD("salvageTemperatureMod"),
    SATIATIONICON("satiationIcon"),
    SECURITYICON("securityIcon"),
    SEED("seed"),
    SHADER("shader"),
    SILICONLAW("siliconLaw"),
    SILICONLAWSET("siliconLawset"),
    SINKPORT("sinkPort"),
    SOUNDCOLLECTION("soundCollection"),
    SOURCEPORT("sourcePort"),
    SPACEBIOME("spaceBiome"),
    SPECIES("species"),
    SPECIESBASESPRITES("speciesBaseSprites"),
    SPEECHSOUNDS("speechSounds"),
    SPEECHVERB("speechVerb"),
    SSDICON("ssdIcon"),
    STACK("stack"),
    STARTINGGEAR("startingGear"),
    STATIONAICUSTOMIZATION("stationAiCustomization"),
    STATIONAICUSTOMIZATIONGROUP("stationAiCustomizationGroup"),
    STATUSEFFECT("statusEffect"),
    STEALTARGETGROUP("stealTargetGroup"),
    STORECATEGORY("storeCategory"),
    STORYTEMPLATE("storyTemplate"),
    TAG("Tag"),
    TECHDISCIPLINE("techDiscipline"),
    TECHNOLOGY("technology"),
    THIEFBACKPACKSET("thiefBackpackSet"),
    TILE("tile"),
    TILEALIAS("tileAlias"),
    TOOL("tool"),
    TRAIT("trait"),
    TRAITCATEGORY("traitCategory"),
    TYPINGINDICATOR("typingIndicator"),
    UITHEME("uiTheme"),
    UTILITYCURVEPRESET("utilityCurvePreset"),
    UTILITYQUERY("utilityQuery"),
    VENDINGMACHINEINVENTORY("vendingMachineInventory"),
    WEATHER("weather"),
    WEIGHTEDRANDOM("weightedRandom"),
    WEIGHTEDRANDOMENTITY("weightedRandomEntity"),
    WEIGHTEDRANDOMFILLSOLUTION("weightedRandomFillSolution"),
    WEIGHTEDRANDOMORE("weightedRandomOre"),
    WEIGHTEDRANDOMSPECIES("weightedRandomSpecies"),
    WEIGHTEDRANDOMXENOARCHTRIGGER("weightedRandomXenoArchTrigger"),
    WIRELAYOUT("wireLayout"),
    WORLDGENCONFIG("worldgenConfig"),
    XENOARCHTRIGGER("xenoArchTrigger");

    private final String id;

    PrototypeBase(String id) {
        this.id = id;
    }

    @Override
    public String asString() {
        return this.id;
    }
    }
